/* 
 Gardino 0.8
 6/21/2014
 By Jeffrey Dorfman
 
 The goal of this project is to maintain proper soil moisture for an outdoor plant. It does so by pumping water into the soil
 once a day, and relying on a moisture sensor to test if the soil is already wet (i.e. from rainfall). It will also add an extra
 afternoon watering (heat of the day) if the soil moisture falls below acceptable levels. The ability to water now, or skip 
 next watering, is available via push button on the side of the arduino enclosure.
 Eventually, I would like this project to involve several potted plants. The ideal being is that they require little maintenance,
 other than refilling the reservoir. I would also like to add the option to mist leaves, possibly in cases of extreme heat.
 
 
 HARDWARE:
 
 * Arduino Uno R3
 * Adafruit Motor Shield v1.2
 * Adafruit DS1307 Breakout
 * Pushbutton w/100 resistor
 * 12v power source
 * Elecrow Moisture Sensor (5v)
 * 12v Micro water pump (~1 liter/18seconds)
 
 
 LIBRARIES UTILIZED:
 
 * Adafruit Motor shield library - copyright Adafruit Industries LLC, 200910
 
 
 MOISTURE SENSOR:
 
 Value range:
 0 ~300 : dry soil
 300~700 : humid soil
 700~950 : in water
 
 
 */

// Libraries
#include <AFMotor.h>
#include <Wire.h>
#include "RTClib.h"

// runEvery macro  http://forum.arduino.cc/index.php?topic=124974.0
#define runEvery(t) for (static typeof(t) _lasttime;\
(typeof(t))((typeof(t))millis() - _lasttime) > (t);\
                         _lasttime += (t))


// ---- CONSTANTS ----
RTC_DS1307 rtc;    // Clock Module
AF_DCMotor motor(1, MOTOR12_1KHZ);   // Motor
const int led_A_Pin = 13;
const int buttonPin = 10; // the pin number for the button
const int led_A_Interval = 500;
const int blinkDurationFast = 500; // number of millisecs for Led ON
const int buttonInterval = 300; // number of millisecs between button readings
const int sensorPin = 15;    //Moisture Sensor
const int blinkLimit = 8;    //Total number of Led Blinks
const int liter (20 * 1000);    // Water Calibration - adjust this time value until water amount is correct - in Millis



// ----- Define State Machine -----
typedef enum {  
  ON,
  OFF}
states;
states state = OFF;

//------- VARIABLES --------
byte waterNow = LOW;
byte lastButtonState = LOW;
byte skipNext = LOW;    //will skip next watering if HIGH
byte led_A_State = LOW;           //   LOW = off
byte runOnce = LOW;
int buttonState;  
int waterOverride = 0;    // if button is held, the system will waterNow, then reset skipnext
int sensorValue;    //define moisture readout
int blinkCount = 8;    //counts # of time led has gone HIGH + LOW
int wetThreshold = 650;
int dryThreshold = 300;
unsigned long currentMillis = 0;    // stores the value of millis() in each iteration of loop()
unsigned long previousLed_A_Millis = 0;
unsigned long previousButtonMillis = 0; // time when button press last checked
unsigned long pumpTimeMillis;


// ------------- ALARMS ------------- 
const int alarmMorningHour = 6;    // set alarm hour (All in 24 hour Time, NOT 12 hour)
const int alarmMorningMinute = 30;  // set alarm minute
const int alarmEveHour = 18;    // set alarm hour 
const int alarmEveMinute = 30;  // set alarm minute


//=================================================================

void setup() {

  // set up Serial library at 9600 bps if detected
  if (Serial) {
    Serial.begin(9600);
    Serial.println("Gardino.ino Test");
  }

  //Defines motor speed
  motor.setSpeed(255);
  motor.run(RELEASE);

  //sets up indicator LED
  pinMode (led_A_Pin, OUTPUT);
  digitalWrite (led_A_Pin, LOW);

  //button
  pinMode(buttonPin, INPUT);

  //Power for DS1307 and Initializes
  pinMode (17, OUTPUT);    
  digitalWrite (17, HIGH);
  pinMode (16, OUTPUT);
  digitalWrite (16, LOW);
  Wire.begin();
  rtc.begin();
  rtc.adjust(DateTime(__DATE__, __TIME__));
  // ******Use Above code to set the rtc if needed*****

  //debug check for RTC
  if (! rtc.isrunning()) { 
    Serial.println("RTC is NOT running!");
  }
}

//============================================

void loop() {

  currentMillis = millis();
  readButton();
  checkMoisture();
  checkWaterAlarm();
  runPump();
  eStop();
  debug();

}

//============================================

void checkMoisture() {

  runEvery (1000){
    sensorValue = analogRead(sensorPin);

    if (skipNext == LOW && sensorValue >= wetThreshold) {
      skipNext = !skipNext;
      Serial.println("Skipping next Watering STORED");
    }
    if (skipNext == HIGH && sensorValue <= dryThreshold) {
      skipNext = !skipNext;
      Serial.println("Next Watering Reinstated");
    }
  }

}

//============================================

void checkWaterAlarm () {
  runEvery (1000){
    DateTime now = rtc.now();

    if (now.hour() == alarmMorningHour && now.minute() == alarmMorningMinute && now.second() == 0){

      if (skipNext == HIGH) {
        Serial.println("Watering Has Been Skipped");
        ledSlow();
        skipNext = !skipNext;
      }

      else {
        waterNow = HIGH;
      }
    }
  }
}

//============================================

void readButton() {

  runEvery (500){
    int buttonState = digitalRead(buttonPin);

    if (buttonState == HIGH) {

      if (skipNext == HIGH) {
        if (waterOverride >= 5) {
          waterNow = HIGH;
          skipNext = !skipNext;
          Serial.println("Next Watering Reinstated");
        }
        Serial.println("Next Watering Already Stored");
        ledFast();
        waterOverride++;
      }

      else {
        skipNext = !skipNext;
        Serial.println("Skipping next Watering STORED");
        ledSlow();
      }
    }
  }
}

//============================================

void displayTime() {

  runEvery (1000){
    DateTime now = rtc.now();  

    if (now.hour() >= 13) {
      Serial.print(now.hour() - 12, DEC);
    }
    else {
      Serial.print(now.hour(), DEC);
    }
    Serial.print(':');
    Serial.print(now.minute(), DEC);
    Serial.print(':');
    Serial.print(now.second(), DEC);
    if (now.hour() >= 13) {
      Serial.print(" PM");
    }
    else {
      Serial.print(" AM");
    }
    Serial.println();
  }
}

//============================================

void ledFast() {
  digitalWrite (led_A_Pin, HIGH);
  delay(100);
  digitalWrite (led_A_Pin, LOW);
  delay(100);
  digitalWrite (led_A_Pin, HIGH);
  delay(100);
  digitalWrite (led_A_Pin, LOW);
  delay(100);
  digitalWrite (led_A_Pin, HIGH);
  delay(100);
  digitalWrite (led_A_Pin, LOW);
  delay(100);
  digitalWrite (led_A_Pin, HIGH);
  delay(100);
  digitalWrite (led_A_Pin, LOW);
}

//============================================

void ledSlow() { 
  digitalWrite (led_A_Pin, HIGH);
  delay(250);
  digitalWrite (led_A_Pin, LOW);
  delay(250);
  digitalWrite (led_A_Pin, HIGH);
  delay(250);
  digitalWrite (led_A_Pin, LOW);
  delay(250);
  digitalWrite (led_A_Pin, HIGH);
  delay(250);
  digitalWrite (led_A_Pin, LOW);
}

//============================================

void runPump() {

  if(waterNow == HIGH) {
    if (runOnce == LOW) {
      state = ON;
      Serial.println("Pump ON");
      Serial.println();
      pumpTimeMillis = (currentMillis + liter);
      runOnce = !runOnce;
      waterOverride = 0;
      waterNow = !waterNow;
    }
  }

  if (currentMillis <= pumpTimeMillis){
    state = ON;
  }

  else {
    if (runOnce == HIGH) {
      Serial.println("Pump OFF");
      Serial.println();
      runOnce = !runOnce;
    }
    state = OFF;
  }

  switch (state) {

  case ON:
    motor.run(FORWARD);
    digitalWrite(led_A_Pin, HIGH);
    break;

  case OFF:
    motor.run(RELEASE);
    digitalWrite(led_A_Pin, LOW);
    break;

  }
}

//============================================

void eStop() {

  runEvery(250){
    if (state == ON) {
      int buttonState = digitalRead(buttonPin);
      if (buttonState == HIGH) {
        pumpTimeMillis = currentMillis;
        motor.run(RELEASE);
        digitalWrite(led_A_Pin, LOW);
        state = OFF;
        Serial.println("EMERGENCY STOP");
      }
    }
  }
}

//============================================

void debug() {
  displayTime();
  runEvery(20000){
    DateTime now = rtc.now();
    sensorValue = analogRead(sensorPin);
    int sec = now.second();

    Serial.print("Morning Alarm Set for ");
    if (alarmMorningHour >= 13) {
      Serial.print(alarmMorningHour - 12, DEC);
    }
    else {
      Serial.print(alarmMorningHour, DEC);
    }
    Serial.print(':');
    Serial.print(alarmMorningMinute, DEC);
    Serial.print(':');
    Serial.print("00");
    if (alarmMorningHour >= 13) {
      Serial.print(" PM");
    }
    else {
      Serial.print(" AM");
    }
    Serial.println();
    Serial.print("Evening Alarm Set for ");
    if (alarmEveHour >= 13) {
      Serial.print(alarmEveHour - 12, DEC);
    }
    else {
      Serial.print(alarmEveHour, DEC);
    }
    Serial.print(':');
    Serial.print(alarmEveMinute, DEC);
    Serial.print(':');
    Serial.print("00");
    if (alarmEveHour >= 13) {
      Serial.print(" PM");
    }
    else {
      Serial.print(" AM");
    }
    Serial.println();
    Serial.print("WaterOverride = ");
    Serial.println(waterOverride);  //if >=5 should flip bit WaterNow
    Serial.print("WaterNow = ");
    Serial.println(waterNow);
    Serial.print("runOnce = ");
    Serial.println(runOnce);
    Serial.print("Pump = ");
    Serial.println(state);
    Serial.print("Current Pump Run Time = ");
    Serial.print(liter / 1000);
    Serial.println(" seconds");
    if (sensorValue == 0) {
      Serial.println ("Moisture Sensor NOT IN SOIL");
    }
    else if (sensorValue <= 300) {
      Serial.println ("Soil is Dry");
    }
    else if (sensorValue > 300 && sensorValue <= 700) {
      Serial.println ("Soil is Humid");
    }
    else if (sensorValue > 700) {
      Serial.println ("Soil is Soaking");
    }
    Serial.print("Actual MoistureSensor = " );                       
    Serial.println(sensorValue);
    Serial.print("skipNext = ");
    Serial.println(skipNext);

  }
}

//===============END=================
